from flask import Flask, jsonify
from flask_mqtt import Mqtt
import json

app = Flask(__name__)

# Setup Flask-MQTT
app.config['MQTT_BROKER_URL'] = 'au1.cloud.thethings.network'
app.config['MQTT_BROKER_PORT'] = 1883
app.config['MQTT_USERNAME'] = 'ccs2106@ttn'
app.config['MQTT_PASSWORD'] = 'NNSXS.ROCAWUJ7HL3A5UF437RKRT7F3W77HGKCV5HX7FQ.52GOJC2OR4CXAYHTJJIGTOINLBSTMJ2BNE2OL4ILVRWO6L2AKAQQ'
app.config['MQTT_REFRESH_TIME'] = 1.0  # refresh time in seconds

mqtt = Mqtt(app)

# Initialize humidity and temperature variables
humidity = None
temperature = None


# MQTT subscription callback
@mqtt.on_connect()
def handle_connect(client, userdata, flags, rc):
    mqtt.subscribe('{ccs2106}@{eui-70b3d57ed0065ffd}')  # Subscribe to the MQTT topic where the data is published

@mqtt.on_message()
def handle_mqtt_message(client, userdata, message):
    # global humidity, temperature
    # # Handle MQTT messages here
    # # For example, if the message payload is JSON containing humidity and temperature
    # data = message.payload.decode('utf-8')
    # humidity = data.get('humidity')
    # temperature = data.get('temperature')
    # print(f'Humidity: {humidity}, Temperature: {temperature}')
    try:
        # Parse the message payload as JSON
        data = json.loads(message.payload.decode('utf-8'))
        humidity = data.get('humidity')
        temperature = data.get('temperature')
        print(f'Humidity: {humidity}, Temperature: {temperature}')
    except json.JSONDecodeError as e:
        print(f'Error decoding JSON: {e}')

@app.route('/')
def index():
    # Return the humidity and temperature data as JSON
    return jsonify({
        'humidity': humidity,
        'temperature': temperature
    })

if __name__ == '__main__':
    app.run(debug=True)
